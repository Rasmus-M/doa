*********************************************************************
*
* Popups for inventory, equipment, shop, etc.
*

*********************************************************************************
*
* Display shop
*
SWINC  EQU  1                          ; Column
SWINR  EQU  1                          ; Row
SWINW  EQU  30                         ; Window width
SWINH  EQU  16                         ; Window height

DSPSHP MOV  R11,*R10+                  ; Push return address onto the stack
       BL   @SPRHDE
*      Display window
       LI   R0,SWINC                   ; Column
       LI   R1,SWINR                   ; Row
       LI   R2,SWINW                   ; Width
       LI   R3,SWINH                   ; Height
       LI   R4,TXSHOP                  ; Title
       BL   @DSPWIN
       BL   @SHWBUF                    ; Switch to view double buffer
*      Display items
       LI   R0,SHOP
       MOV  R0,@ITM1ST                 ; First item displayed
       MOV  R0,@ITMSEL                 ; Selected item
DSPSH1 MOV  @ITM1ST,@ITMCUR            ; Current item
       LI   R1,SWINC+1
       MOV  R1,@COL                    ; Left column
       LI   R0,SWINR+1
       MOV  R0,@ROW                    ; Current row
       LI   R14,SWINH-2                ; Counter for max displayed items
DSPSH2 MOV  @ITMCUR,R3
       C    R3,@SHPNXT                 ; Check for end of inventory
       JHE  DSPSH5
       MOV  @COL,R0                    ; Column
       MOV  @ROW,R1                    ; Row
       C    R3,@ITMSEL                 ; Check if item is selected
       JNE  DSPSH3
       LI   R2,TXGT                    ; >
       JMP  DSPSH4
DSPSH3 LI   R2,TXSPAC                  ; Space
DSPSH4 BL   @DSPTXT
       MOV  *R3,R3
       LI   R4,SWINW-7
       BL   @DSPITM
*      Value
       MOV  @COL,R0
       AI   R0,SWINW-3
       SLA  R0,8
       MOVB @ROW+1,@R0LB
       MOV  @IIITEM(R3),R5             ; Get item
       MOV  @ITVALU(R5),R1
       BL   @DNUMR
*      Next item
       INCT @ITMCUR
       INC  @ROW
       DEC  R14
       JNE  DSPSH2
*      Check keys
DSPSH5 BL   @RELKEY
*      Down
       LI   R0,KEY_DN
       BL   @CHKKEY
       JEQ  DSPSH6
       MOV  @SHPNXT,R0
       DECT R0
       C    @ITMSEL,R0
       JHE  DSPSH6
       INCT @ITMSEL
       MOV  @ITM1ST,R0
       AI   R0,SWINH-2*2
       C    @ITMSEL,R0
       JL   DSPSH1
       INCT @ITM1ST
       JMP  DSPSH1
*      Up
DSPSH6 LI   R0,KEY_UP
       BL   @CHKKEY
       JEQ  DSPSH7
       LI   R0,SHOP
       C    @ITMSEL,R0
       JLE  DSPSH7
       DECT @ITMSEL
       C    @ITMSEL,@ITM1ST
       JHE  DSPSH1
       DECT @ITM1ST
       JMP  DSPSH1
*      Buy
DSPSH7 LI   R0,KEY_B
       BL   @CHKKEY
       JEQ  DSPS10
       MOV  @ITMSEL,R0
       BL   @BUY
       MOV  R0,R5                      ; R0 points to the inventory entry
       JEQ  DSPS10                     ; or null if buying failed
       LI   R2,TXUBUY
       BL   @MSG
       MOV  *R5,R5                     ; Get item instance
       MOV  @IIITEM(R5),R5             ; Get item
       CLR  R6
       MOVB @ITTILE(R5),@R6LB          ; Get tile number
       SLA  R6,1
       MOV  @TNAMES(R6),R2             ; Get name
       BL   @MSGLN
       BL   @DMSSGS
*      Remove from list
DSPSH8 LI   R0,SWINC+1                 ; Column
       LI   R1,SWINR+1                 ; Row
       LI   R2,SWINW-2                 ; Width
       LI   R3,SWINH-2                 ; Height
       BL   @CLRWIN                    ; Clear window
       C    @ITMSEL,@SHPNXT
       JNE  DSPSH9
       LI   R0,SHOP
       C    @SHPNXT,R0
       JEQ  DSPSH9
       DECT @ITMSEL
DSPSH9 B    @DSPSH1
*      Sell
DSPS10 LI   R0,KEY_S
       BL   @CHKKEY
       JEQ  DSPS11
;      TODO?
*      Escape keys
DSPS11 BL   @CHKESC
       JNE  DSPS12
       B    @DSPSH5
*      Refresh screen
DSPS12 BL   @SPRSHW
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// DSPSHP

*********************************************************************************
*
* Display inventory
*
IWINC  EQU  1                          ; Column
IWINR  EQU  1                          ; Row
IWINW  EQU  30                         ; Window width
IWINH  EQU  8                          ; Window height
*
DSPINV MOV  R11,*R10+                  ; Push return address onto the stack
       BL   @SPRHDE
*      Display window
       LI   R0,IWINC                   ; Column
       LI   R1,IWINR                   ; Row
       LI   R2,IWINW                   ; Width
       LI   R3,IWINH                   ; Height
       LI   R4,TXINV                   ; Title
       BL   @DSPWIN
       BL   @SHWBUF                    ; Switch to view double buffer
*      Display items
       LI   R0,INVENT
       MOV  R0,@ITM1ST                 ; First item displayed
       MOV  R0,@ITMSEL                 ; Selected item
DSPIN1 MOV  @ITM1ST,@ITMCUR            ; Current item
       LI   R1,IWINC+1
       MOV  R1,@COL                    ; Left column
       LI   R0,IWINR+1
       MOV  R0,@ROW                    ; Current row
       LI   R14,IWINH-2                ; Counter for max displayed items
DSPIN2 MOV  @ITMCUR,R3
       C    R3,@INVNXT                 ; Check for end of inventory
       JHE  DSPIN5
       MOV  @COL,R0                    ; Column
       MOV  @ROW,R1                    ; Row
       C    R3,@ITMSEL                 ; Check if item is selected
       JNE  DSPIN3
       LI   R2,TXGT                    ; >
       JMP  DSPIN4
DSPIN3 LI   R2,TXSPAC                  ; Space
DSPIN4 BL   @DSPTXT
       MOV  *R3,R3
       LI   R4,IWINW-3
       BL   @DSPITM
       INCT @ITMCUR
       INC  @ROW
       DEC  R14
       JNE  DSPIN2
*      Check keys
DSPIN5 BL   @RELKEY
*      Down
       LI   R0,KEY_DN
       BL   @CHKKEY
       JEQ  DSPIN6
       MOV  @INVNXT,R0
       DECT R0
       C    @ITMSEL,R0
       JHE  DSPIN6
       INCT @ITMSEL
       MOV  @ITM1ST,R0
       AI   R0,IWINH-2*2
       C    @ITMSEL,R0
       JL   DSPIN1
       INCT @ITM1ST
       JMP  DSPIN1
*      Up
DSPIN6 LI   R0,KEY_UP
       BL   @CHKKEY
       JEQ  DSPIN7
       LI   R0,INVENT
       C    @ITMSEL,R0
       JLE  DSPIN7
       DECT @ITMSEL
       C    @ITMSEL,@ITM1ST
       JHE  DSPIN1
       DECT @ITM1ST
       JMP  DSPIN1
*      Use
DSPIN7 LI   R0,KEY_U
       BL   @CHKKEY
       JEQ  DSPI10
       MOV  @ITMSEL,R0
       BL   @USEITM
       MOV  R0,R5                      ; R0 points to the item
       JNE  DSPIN8                     ; Or null if using failed
       LI   R2,TXCUSE
       JMP  DSPIN9
DSPIN8 LI   R2,TXUUSE
       BL   @MSG
       CLR  R6
       MOVB @ITTILE(R5),@R6LB          ; Get tile number
       SLA  R6,1
       MOV  @TNAMES(R6),R2             ; Get name
DSPIN9 BL   @MSGLN
       BL   @DMSSGS
       BL   @CLCEQU
       JMP  DSPI13                     ; Remove from list
*      Wear
DSPI10 LI   R0,KEY_W
       BL   @CHKKEY
       JEQ  DSPI11
       MOV  @ITMSEL,R0
       C    R0,@INVNXT
       JEQ  DSPI11
       BL   @WEAITM
       MOV  R0,R5                      ; R0 points to equipment entry
       JEQ  DSPI11                     ; or null if wearing failed.
       LI   R2,TXUWEA
       BL   @MSG
       MOV  *R5,R5                     ; Get item instance
       MOV  @IIITEM(R5),R5             ; Get item
       CLR  R6
       MOVB @ITTILE(R5),@R6LB          ; Get tile number
       SLA  R6,1
       MOV  @TNAMES(R6),R2             ; Get name
       BL   @MSGLN
       BL   @DMSSGS
       BL   @CLCEQU
       JMP  DSPI13                     ; Remove from list
*      Drop
DSPI11 LI   R0,KEY_D
       BL   @CHKKEY
       JEQ  DSPI12
       MOV  @ITMSEL,R0
       BL   @DRPITM
       MOV  R0,R5                      ; R0 points to the item
       JEQ  DSPI13                     ; or null if dropping failed
       LI   R2,TXUDRP
       BL   @MSG
       CLR  R6
       MOVB @ITTILE(R5),@R6LB          ; Get tile number
       SLA  R6,1
       MOV  @TNAMES(R6),R2             ; Get name
       BL   @MSGLN
       BL   @DMSSGS
*      Sell
DSPI12 LI   R0,KEY_S
       BL   @CHKKEY
       JEQ  DSPI15
       MOV  @CTILE,R1
       CI   R1,TSHOP
       JNE  DSPI13
       MOV  @ITMSEL,R0
       BL   @SELL
       MOV  R0,R5                      ; R0 points to the item
       JEQ  DSPI13                     ; or null if selling failed
       LI   R2,TXUSEL
       BL   @MSG
       MOV  *R5,R5                     ; Get item instance
       MOV  @IIITEM(R5),R5             ; Get item
       CLR  R6
       MOVB @ITTILE(R5),@R6LB          ; Get tile number
       SLA  R6,1
       MOV  @TNAMES(R6),R2             ; Get name
       BL   @MSGLN
       BL   @DMSSGS
*      Remove from list
DSPI13 LI   R0,IWINC+1                 ; Column
       LI   R1,IWINR+1                 ; Row
       LI   R2,IWINW-2                 ; Width
       LI   R3,IWINH-2                 ; Height
       BL   @CLRWIN                    ; Clear window
       C    @ITMSEL,@INVNXT
       JNE  DSPI14
       LI   R0,INVENT
       C    @INVNXT,R0
       JEQ  DSPI14
       DECT @ITMSEL
DSPI14 B    @DSPIN1
*      Escape keys
DSPI15 BL   @CHKESC
       JNE  DSPI16
       B    @DSPIN5
*      Refresh screen
DSPI16 BL   @SPRSHW
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// DSPINV

*********************************************************************************
*
* Display equipment
*
EWINC  EQU  1                          ; Column
EWINR  EQU  1                          ; Row
EWINW  EQU  30                         ; Window width
EWINH  EQU  10                          ; Window height
*
DSPEQU MOV  R11,*R10+                  ; Push return address onto the stack
       BL   @SPRHDE
*      Display window
       LI   R0,EWINC                   ; Column
       LI   R1,EWINR                   ; Row
       LI   R2,EWINW                   ; Width
       LI   R3,EWINH                   ; Height
       LI   R4,TXEQU                   ; Title
       BL   @DSPWIN
       BL   @SHWBUF                    ; Switch to view double buffer
*      Display items
       LI   R0,EQUIPM
       MOV  R0,@ITM1ST                 ; First item displayed
       MOV  R0,@ITMSEL                 ; Selected item
DSPEQ1 MOV  @ITM1ST,@ITMCUR            ; Current item
       LI   R1,EWINC+1
       MOV  R1,@COL                    ; Left column
       LI   R0,EWINR+1
       MOV  R0,@ROW                    ; Current row
       LI   R14,EWINH-2                ; Counter for max displayed items
DSPEQ2 MOV  @ITMCUR,R3
       CI   R3,EQUIPE                  ; Check for end of equipment
       JHE  DSPEQ5
       MOV  @COL,R0                    ; Column
       MOV  @ROW,R1                    ; Row
       C    R3,@ITMSEL                 ; Check if item is selected
       JNE  DSPEQ3
       LI   R2,TXGT                    ; >
       JMP  DSPEQ4
DSPEQ3 LI   R2,TXSPAC                   ; Space
DSPEQ4 BL   @DSPTXT
       LI   R4,EWINW-3
       MOV   @EQTEXT-EQUIPM(R3),R2
       BL   @DTXT
       LI   R2,TXCOLN
       BL   @DTXT
       MOV  *R3,R3
       BL   @DSPITM
       INCT @ITMCUR
       INC  @ROW
       DEC  R14
       JNE  DSPEQ2
*      Check keys
DSPEQ5 BL   @RELKEY
*      Down
       LI   R0,KEY_DN
       BL   @CHKKEY
       JEQ  DSPEQ6
       LI   R0,EQUIPE-2
       C    @ITMSEL,R0
       JHE  DSPEQ6
       INCT @ITMSEL
       MOV  @ITM1ST,R0
       AI   R0,EWINH-2*2
       C    @ITMSEL,R0
       JL   DSPEQ1
       INCT @ITM1ST
       JMP  DSPEQ1
*      Up
DSPEQ6 LI   R0,KEY_UP
       BL   @CHKKEY
       JEQ  DSPEQ7
       LI   R0,EQUIPM
       C    @ITMSEL,R0
       JLE  DSPEQ7
       DECT @ITMSEL
       C    @ITMSEL,@ITM1ST
       JHE  DSPEQ1
       DECT @ITM1ST
       JMP  DSPEQ1
*      Use
DSPEQ7 LI   R0,KEY_U
       BL   @CHKKEY
       JEQ  DSPEQ8
;      TODO
*      Remove
DSPEQ8 LI   R0,KEY_R
       BL   @CHKKEY
       JEQ  DSPEQ0
       MOV  @ITMSEL,R0
       MOV  *R0,R1
       JEQ  DSPEQ0
       BL   @REMITM
       MOV  R0,R5
       JEQ  DSPEQ0
       LI   R2,TXUREM
       BL   @MSG
       MOV  *R5,R5                     ; Get item instance
       MOV  @IIITEM(R5),R5             ; Get item
       CLR  R6
       MOVB @ITTILE(R5),@R6LB          ; Get tile number
       SLA  R6,1
       MOV  @TNAMES(R6),R2             ; Get name
       BL   @MSGLN
       BL   @DMSSGS
       BL   @CLCEQU
       B    @DSPEQ1
*      Escape keys
DSPEQ0 BL   @CHKESC
       JEQ  DSPEQ5
*      Refresh screen
       BL   @SPRSHW
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// DSPEQU

*********************************************************************************
*
* Display item to VDP
* VDP address should be set up in advance
*
* R3: Pointer to item instance
* R4: Padding width
*
DSPITM MOV  R11,*R10+                  ; Push return address onto the stack
       MOV  R3,R3
       JNE  DSPIT0
       LI   R2,TXNOTH
       BL   @DTXT
       JMP  DSPIT3
DSPIT0 MOV  @IIITEM(R3),R5             ; Get item
       CLR  R6
*      Icon
;       MOVB @ITTILE(R5),@R6LB          ; Get tile number
;       MOVB @TCMAP(R6),@VDPWD
;       LI   R1,>2000
;       MOVB R1,@VDPWD
;       DECT R4
*      Material
       MOVB @ITMTRL(R5),@R6LB          ; Get material number
       JEQ  DSPIT1
       LI   R7,MTSIZE                  ; Structure size
       MPY  R7,R6                      ; Multiply by structure size (this is 2 so we could also use a shift)
       AI   R7,MTRLS                   ; Add base
       MOV  @MTNAME(R7),R2             ; Get name
       BL   @DTXT
       LI   R2,TXSPAC
       BL   @DTXT
*      Tile
DSPIT1 MOVB @ITTILE(R5),@R6LB          ; Get tile number
       MOV  R6,R7
       SLA  R7,1
       MOV  @TNAMES(R7),R2             ; Get name
       BL   @DTXT
*      Capability
DSPIT2 MOVB @ITCPBL(R5),@R6LB          ; Get capability number
       JEQ  DSPIT3
       LI   R2,TXOF
       BL   @DTXT
       LI   R7,CBSIZE                  ; Structure size
       MPY  R7,R6                      ; Multiply by structure size (this is 2 so we could also use a shift)
       AI   R7,CPBLS                   ; Add base
       MOV  @CBNAME(R7),R2             ; Get name
       BL   @DTXT
*      Padding
DSPIT3 MOV  R4,R2
       JLT  DSPIT5
       JEQ  DSPIT5
       LI   R1,>2000
DSPIT4 MOVB R1,@VDPWD
       DEC  R2
       JNE  DSPIT4
*      Return
DSPIT5 DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// DSPITM
